#include <stdio.h>

#include <stdlib.h>

#include <string.h>

#include <unistd.h>

#include <sys/stat.h>



#define MAX_FILES 32

#define MAX_SIZE 200 * 1024 * 1024 // 200 MB



typedef struct {

    char name[256];

    char permissions[10];

    size_t size;

} FileInfo;



void createArchive(char* outputFileName, char* inputFiles[], int numFiles);

void extractArchive(char* archiveFileName, char* outputDirectory);



int main(int argc, char* argv[]) {

    if (argc < 2) {

        printf("Usage: %s -b file1 file2 ... -o output.sau\n", argv[0]);

        printf("       %s -a archive.sau output_directory\n", argv[0]);

        exit(EXIT_FAILURE);

    }



    if (strcmp(argv[1], "-b") == 0) {

        if (argc < 5 || strcmp(argv[argc - 2], "-o") != 0) {

            printf("Usage: %s -b file1 file2 ... -o output.sau\n", argv[0]);

            exit(EXIT_FAILURE);

        }



        char* outputFileName = (argc > 4) ? argv[argc - 1] : "a.sau";

        createArchive(outputFileName, argv + 2, argc - 4);

        printf("The files have been merged.\n");

    } else if (strcmp(argv[1], "-a") == 0) {

        if (argc != 4) {

            printf("Usage: %s -a archive.sau output_directory\n", argv[0]);

            exit(EXIT_FAILURE);

        }



        extractArchive(argv[2], argv[3]);

        printf("Files opened in the %s directory.\n", argv[3]);

    } else {

        printf("Invalid option. Use -b to create an archive or -a to extract.\n");

        exit(EXIT_FAILURE);

    }



    return 0;

}



void createArchive(char *outputFileName, char *inputFiles[], int numFiles) {

    if (numFiles > MAX_FILES) {

        fprintf(stderr, "Error: Number of input files exceeds the limit of %d.\n", MAX_FILES);

        exit(EXIT_FAILURE);

    }



    size_t totalSize = 0;



    for (int i = 0; i < numFiles; ++i) {

        FILE *file = fopen(inputFiles[i], "r");



        if (!file) {

            perror("Error opening input file");

            exit(EXIT_FAILURE);

        }



        fseek(file, 0L, SEEK_END);

        size_t fileSize = ftell(file);

        totalSize += fileSize;



        fclose(file);

    }



    if (totalSize > MAX_SIZE) {

        fprintf(stderr, "Error: Total size of input files exceeds the limit of %d MB.\n", MAX_SIZE / (1024 * 1024));

        exit(EXIT_FAILURE);

    }



    FILE *outputFile = fopen(outputFileName, "w");

    if (!outputFile) {

        perror("Error creating output file");

        exit(EXIT_FAILURE);

    }



    // Write archived files

    for (int i = 0; i < numFiles; ++i) {

        FILE *inputFile = fopen(inputFiles[i], "r");



        if (!inputFile) {

            perror("Error opening input file");

            exit(EXIT_FAILURE);

        }



        FileInfo fileInfo;

        strcpy(fileInfo.name, inputFiles[i]);

        // Assuming default permissions for simplicity

        strcpy(fileInfo.permissions, "rw-r--r--");

        fileInfo.size = ftell(inputFile);



        // Move back to the beginning of the file

        fseek(inputFile, 0L, SEEK_SET);



        // Write file contents to the output file

        char buffer[1024];

        size_t bytesRead;



        while ((bytesRead = fread(buffer, 1, sizeof(buffer), inputFile)) > 0) {

            fwrite(buffer, 1, bytesRead, outputFile);

        }



        fclose(inputFile);

    }



    fclose(outputFile);

}





void extractArchive(char* archiveFileName, char* outputDirectory) {

    FILE* archiveFile = fopen(archiveFileName, "r");



    if (!archiveFile) {

        perror("Error opening archive file");

        exit(EXIT_FAILURE);

    }



    // Read organization information

    size_t totalSize;

    /*if (fscanf(archiveFile, "%010zu", &totalSize) != 1) {

        fprintf(stderr, "Error reading organization information from the archive.\n");

        exit(EXIT_FAILURE);

    }

*/

    // Ensure the output directory exists

    if (access(outputDirectory, F_OK) == -1) {

        if (mkdir(outputDirectory, 0777) != 0) {

            perror("Error creating output directory");

            exit(EXIT_FAILURE);

        }

    }



    // Read and extract each file

    while (!feof(archiveFile)) {

        FileInfo fileInfo;



        if (fscanf(archiveFile, "|%[^,],%[^,],%zu|", fileInfo.name, fileInfo.permissions, &fileInfo.size) != 3) {

            break; // End of organization information

        }



        char outputPath[512];

        snprintf(outputPath, sizeof(outputPath), "%s/%s", outputDirectory, fileInfo.name);



        FILE* outputFile = fopen(outputPath, "w");



        if (!outputFile) {

            perror("Error creating output file");

            exit(EXIT_FAILURE);

        }



        char buffer[1024];

        size_t bytesToRead = fileInfo.size;



        while (bytesToRead > 0) {

            size_t bytesRead = fread(buffer, 1, (bytesToRead > sizeof(buffer)) ? sizeof(buffer) : bytesToRead, archiveFile);



            fwrite(buffer, 1, bytesRead, outputFile);



            bytesToRead -= bytesRead;

        }



        fclose(outputFile);

    }



    fclose(archiveFile);

}